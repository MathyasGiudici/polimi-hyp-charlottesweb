{
  "swagger": "2.0",
  "info": {
    "description": "API | Hypermedia Project Criscuolo-Franzini-Giudici",
    "version": "1.4.0",
    "title": "Book API"
  },
  "host": "polimi-hyp-charlottesweb.herokuapp.com",
  "basePath": "/api",
  "tags": [
    {
      "name": "Books",
      "description": "All about our books"
    },
    {
      "name": "Authors",
      "description": "All about our authors"
    },
    {
      "name": "Users",
      "description": "All about our users"
    },
    {
      "name": "Reviews",
      "description": "All about reviews of books"
    },
    {
      "name": "Events",
      "description": "All about the events"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/books": {
      "get": {
        "tags": [
          "Books"
        ],
        "summary": "Get all books",
        "operationId": "getBooks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination offset. Default is 0",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items per page. Default is 20 and cannot exceed 500",
            "required": false,
            "type": "integer",
            "default": 20,
            "maximum": 500
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Book"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-swagger-router-controller": "Books"
      }
    },
    "/books/findBy": {
      "get": {
        "tags": [
          "Books"
        ],
        "summary": "Get all books with a specific criterion",
        "operationId": "getBooksFindBy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "attribute",
            "in": "query",
            "description": "Attribute to search on. For example: author, type, genre, ... ",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "query",
            "description": "Key of the attribute to the search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Book"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-swagger-router-controller": "Books"
      }
    },
    "/books/{isbn}": {
      "get": {
        "tags": [
          "Books"
        ],
        "summary": "Get a specific book",
        "operationId": "getBooksByIsbn",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "isbn",
            "in": "path",
            "description": "ISBN of the book to look for",
            "required": true,
            "type": "string",
            "maxLength": 13,
            "minLength": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/Book"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-swagger-router-controller": "Books"
      }
    },
    "/books/{isbn}/similar": {
      "get": {
        "tags": [
          "Books"
        ],
        "summary": "Get similars book of a specific one",
        "operationId": "getSimilarBooksByIsbn",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "isbn",
            "in": "path",
            "description": "ISBN of the book to look for its similars",
            "required": true,
            "type": "string",
            "maxLength": 13,
            "minLength": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Book"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-swagger-router-controller": "Books"
      }
    },
    "/reviews": {
      "get": {
        "tags": [
          "Reviews"
        ],
        "summary": "Get all reviews",
        "operationId": "getReviews",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination offset. Default is 0",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items per page. Default is 20 and cannot exceed 500",
            "required": false,
            "type": "integer",
            "default": 20,
            "maximum": 500
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Review"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-swagger-router-controller": "Reviews"
      },
      "post": {
        "tags": [
          "Reviews"
        ],
        "summary": "Post a review",
        "operationId": "postReviews",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Review to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Review"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/Review"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-swagger-router-controller": "Reviews"
      }
    },
    "/review/findBy": {
      "get": {
        "tags": [
          "Reviews"
        ],
        "summary": "Get all reviews with a specific criterion",
        "operationId": "getReviewsFindBy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "attribute",
            "in": "query",
            "description": "Attribute to search on. For example: author(user), book, ... ",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "query",
            "description": "Key of the attribute for the search",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Review"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-swagger-router-controller": "Reviews"
      }
    },
    "/reviews/{id}": {
      "get": {
        "tags": [
          "Reviews"
        ],
        "summary": "Get a specific review",
        "operationId": "getReviewsById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the review to look for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/Review"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-swagger-router-controller": "Reviews"
      },
      "put": {
        "tags": [
          "Reviews"
        ],
        "summary": "Update a specific review",
        "operationId": "putReviewsById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the review to modify",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Body of the review to modify",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Review"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/Review"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-swagger-router-controller": "Reviews"
      },
      "delete": {
        "tags": [
          "Reviews"
        ],
        "summary": "Delete a specific review",
        "operationId": "deleteReviewsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the review to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-swagger-router-controller": "Reviews"
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Login with a form",
        "operationId": "postUsersLogin",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "formData",
            "required": true,
            "type": "string",
            "format": "email"
          },
          {
            "name": "password",
            "in": "formData",
            "required": true,
            "type": "string",
            "format": "password"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Login",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-swagger-router-controller": "Users"
      }
    },
    "/users/logout": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Logout",
        "operationId": "postUsersLogout",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Logout",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-swagger-router-controller": "Users"
      }
    },
    "/users/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Register into the store",
        "operationId": "postUsersRegister",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User to sign-up",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-swagger-router-controller": "Users"
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get my user",
        "operationId": "getUsersMe",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-swagger-router-controller": "Users"
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update my user profile",
        "operationId": "putUsersMe",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "My User updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-swagger-router-controller": "Users"
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete my user",
        "operationId": "deleteUsersMe",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-swagger-router-controller": "Users"
      }
    },
    "/users/me/cart": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get my user's cart",
        "operationId": "getCart",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/Cart"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-swagger-router-controller": "Users"
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update my user's cart",
        "operationId": "putCart",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Updated Cart of my User",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cart"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/Cart"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-swagger-router-controller": "Users"
      }
    },
    "/authors": {
      "get": {
        "tags": [
          "Authors"
        ],
        "summary": "Get all authors",
        "operationId": "getAuthors",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination offset. Default is 0",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items per page. Default is 20 and cannot exceed 500",
            "required": false,
            "type": "integer",
            "default": 20,
            "maximum": 500
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Author"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-swagger-router-controller": "Authors"
      }
    },
    "/authors/{id}": {
      "get": {
        "tags": [
          "Authors"
        ],
        "summary": "Get a specific author",
        "operationId": "getAuthorsById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the author to look for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/Author"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-swagger-router-controller": "Authors"
      }
    },
    "/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get all events",
        "operationId": "getEvents",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination offset. Default is 0",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items per page. Default is 20 and cannot exceed 500",
            "required": false,
            "type": "integer",
            "default": 20,
            "maximum": 500
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-swagger-router-controller": "Events"
      }
    },
    "/events/findBy": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get all events with a specific criterion",
        "operationId": "getEventsFindBy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "attribute",
            "in": "query",
            "description": "Attribute to search on. For example: author, book, date, ... ",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "query",
            "description": "Key of the attribute for the search",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-swagger-router-controller": "Events"
      }
    },
    "/events/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get a specific event",
        "operationId": "getEventsById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the event to look for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-swagger-router-controller": "Events"
      }
    }
  },
  "definitions": {
    "Book": {
      "type": "object",
      "required": [
        "isbn"
      ],
      "properties": {
        "isbn": {
          "type": "string",
          "minLength": 10,
          "maxLength": 13
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "interview": {
          "type": "string"
        },
        "numOfPages": {
          "type": "integer"
        },
        "authors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Author"
          }
        },
        "photo": {
          "type": "string",
          "format": "binary"
        },
        "type": {
          "type": "string",
          "enum": [
            "paper",
            "ebook"
          ]
        },
        "pubbDate": {
          "type": "string",
          "format": "date"
        },
        "genre": {
          "type": "string",
          "enum": [
            "fantasy",
            "science",
            "western",
            "romance",
            "thriller",
            "biography",
            "horror",
            "children",
            "detective",
            "poetry"
          ]
        },
        "theme": {
          "type": "string",
          "enum": [
            "love",
            "war",
            "friendship",
            "death",
            "freedom",
            "justice",
            "power",
            "discovery",
            "security"
          ]
        },
        "similarTo": {
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 10,
            "maxLength": 13
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "available",
            "out of stock"
          ]
        },
        "ourFavorite": {
          "type": "boolean"
        },
        "bestSelling": {
          "type": "boolean"
        },
        "price": {
          "$ref": "#/definitions/Amount"
        }
      },
      "example": {
        "isbn": "9788804666639",
        "title": "La solitudine dei numeri primi",
        "description": "La solitudine dei numeri primi description",
        "interview": "Il primo best seller sulla matematica",
        "numOfPages": 266,
        "authors": {
          "id": "authorA001",
          "name": "Paolo",
          "surname": "Giordano",
          "bio": "il fisico romanziere"
        },
        "photo": "",
        "type": "paper",
        "pubbDate": "2016-5-26",
        "genre": "romance",
        "theme": "love",
        "similarTo": [
          "9788867024766",
          "9788804606246"
        ],
        "status": "available",
        "ourFavorite": false,
        "bestSelling": true,
        "price": {
          "value": "14,00",
          "currency": "euro"
        }
      }
    },
    "Review": {
      "type": "object",
      "required": [
        "id",
        "isbn",
        "timestamp",
        "title",
        "userId"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "isbn": {
          "type": "string",
          "minLength": 10,
          "maxLength": 13
        },
        "userId": {
          "type": "string",
          "format": "email"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "example": {
        "id": "userR001",
        "isbn": "9788804666639",
        "userId": "user@mail.polimi.it",
        "title": "Need to be read",
        "description": "Beautiful italin book.",
        "timestamp": "2017-07-21T17:32:28Z"
      }
    },
    "Amount": {
      "type": "object",
      "required": [
        "currency",
        "value"
      ],
      "properties": {
        "value": {
          "type": "number",
          "format": "double",
          "minimum": 0
        },
        "currency": {
          "type": "string",
          "enum": [
            "euro",
            "dollar"
          ]
        }
      },
      "example": {
        "value": "11,0",
        "currency": "euro"
      }
    },
    "User": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "password"
        },
        "gender": {
          "type": "string",
          "enum": [
            "female",
            "male"
          ]
        },
        "birthDay": {
          "type": "integer",
          "format": "date"
        },
        "userType": {
          "type": "string",
          "enum": [
            "user",
            "admin"
          ]
        }
      },
      "example": {
        "email": "user@mail.polimi.it",
        "firstName": "Mario",
        "lastName": "Rossi",
        "password": "1234",
        "gender": "female",
        "birthDay": "1990-07-21",
        "userType": "user"
      }
    },
    "Cart": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "email"
        },
        "total": {
          "$ref": "#/definitions/Amount"
        },
        "books": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "book": {
                "type": "string",
                "minLength": 10,
                "maxLength": 13
              },
              "quantity": {
                "type": "integer",
                "minimum": 1
              }
            }
          }
        }
      },
      "example": {
        "id": "user@mail.polimi.it",
        "total": {
          "value": "14,00",
          "currency": "euro"
        },
        "books": [
          {
            "book": "9788867024766",
            "quantity": 1
          },
          {
            "book": "9788804606246",
            "quantity": 10
          }
        ]
      }
    },
    "Author": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "surname": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        },
        "photo": {
          "type": "string",
          "format": "binary"
        }
      },
      "example": {
        "id": "authorA001",
        "name": "Fred",
        "surname": "Vargas",
        "bio": " pseudonym of Frédérique Audoin-Rouzeau"
      }
    },
    "Event": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "book": {
          "type": "string",
          "minLength": 10,
          "maxLength": 13
        },
        "authors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Author"
          }
        },
        "place": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "photo": {
          "type": "string",
          "format": "binary"
        }
      },
      "example": {
        "id": "EVENT001",
        "title": "Evento @POLIMI",
        "book": "9788804666639",
        "authors": {
          "id": "authorA001",
          "name": "Fred",
          "surname": "Vargas",
          "bio": " pseudonym of Frédérique Audoin-Rouzeau"
        },
        "place": "Aula De Donato @POLIMI",
        "timestamp": "2019-10-01T10:30:00"
      }
    },
    "ApiResponse": {
      "type": "object",
      "required": [
        "response"
      ],
      "properties": {
        "response": {
          "type": "string"
        }
      },
      "example": {
        "response": "Successful Login"
      }
    }
  }
}